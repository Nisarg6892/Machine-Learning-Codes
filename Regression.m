%{
 % %% Import data from text file.
% % Script for importing data from the following text file:
% %
% %    /Users/NISARG/Documents/MATLAB/Querylevelnorm.txt
% %
% % To extend the code to different selected data or a different text file,
% % generate a function instead of a script.
 
% % Auto-generated by MATLAB on 2015/10/27 13:12:06
 
% %% Initialize variables.
filename = '/Users/NISARG/Documents/MATLAB/Querylevelnorm.txt';
delimiter = ' ';

% %% Read columns of data as strings:
% % For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

% %% Open the text file.
fileID = fopen(filename,'r');
 
% %% Read columns of data according to format string.
% % This call is based on the structure of the file used to generate this
% % code. If an error occurs for a different file, try regenerating the code
% % from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);
 
% %% Close the text file.
fclose(fileID);
 
% %% Convert the contents of columns containing numeric strings to numbers.
% % Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));
 
for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,54,57]
     % Converts strings in the input cell array to numbers. Replaced non-numeric
     % strings with NaN.
     rawData = dataArray{col};
     for row=1:size(rawData, 1);
         % Create a regular expression to detect and remove non-numeric prefixes and
         % suffixes.
         regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
         try
             result = regexp(rawData{row}, regexstr, 'names');
             numbers = result.numbers;
             
             % Detected commas in non-thousand locations.
             invalidThousandsSeparator = false;
             if any(numbers==',');
                 thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                 if isempty(regexp(thousandsRegExp, ',', 'once'));
                     numbers = NaN;
                     invalidThousandsSeparator = true;
                 end
             end
             % Convert numeric strings to numbers.
             if ~invalidThousandsSeparator;
                 numbers = textscan(strrep(numbers, ',', ''), '%f');
                 numericData(row, col) = numbers{1};
                 raw{row, col} = numbers{1};
             end
         catch me
        end
    end
end
%}
for cluster = 85:85
   M1 = cluster;
   n = floor(69623*0.8);
   count = 0;
   mu1 = zeros(46,cluster);
   Sigma1 = zeros(46,46,cluster);
   designMatrix = zeros(n,cluster);
   
   cell_whole = raw(1:n, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
   x_whole = cell2mat(cell_whole);
   sigma = diag(diag(cov(x_whole)))+eye(46)/100;
   sigma_inverse = inv(sigma);
   
   diagonal_sigma = diag(diag(sigma));
   lambda1 = 0.001;
   
   trainInd1 = [];
   for indices = 1:n
      trainInd1 = [trainInd1; indices];
   end
   
   temp_n = floor(69623*0.1);
   validInd1 = [];
   for indices = n+1:n+temp_n
      validInd1 = [validInd1; indices];
   end
   
   while(count<cluster)
       if(count==0)
           lower = 1;
           upper = floor(n/cluster);
       elseif(count==cluster-1)
           lower = floor((n/cluster))*count+1;
           upper = n;
       else
           lower = floor((n/cluster))*count+1;
           upper = floor((n/cluster))*(count+1);
       end
       
       cell_For_Mew = raw(lower:upper, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
       x_For_Mew = cell2mat(cell_For_Mew);
       mew = mean(x_For_Mew);
%        sigma = cov(x_For_Mew)+eye(46)/100
       mu1(:,count+1) = transpose(mew);
       Sigma1(:,:,count+1) = diagonal_sigma;
       
       count = count + 1;
   end
   
   for r = 1:n
       cell = raw(r, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
       x_cell = cell2mat(cell);
       for clust = 1:cluster
           subtraction = x_cell-transpose(mu1(:,clust));
           answer = exp(-0.5 * subtraction * sigma_inverse * transpose(subtraction));
           designMatrix(r,clust)=answer;
       end
   end
   
   designMatrix(:,1)=1;
   w1 = inv(lambda1*eye(cluster) + transpose(designMatrix) * designMatrix) * transpose(designMatrix) * cell2mat(raw(1:n,1))
   
   E_dW = 0;
   for N=1:n
       E_w = (cell2mat(raw(N,1)) - ( transpose(w1) * transpose(designMatrix(N,:))));
       E_dW = E_dW + E_w^2;
       Graph(N) = E_dW;
   end
   E_dW = E_dW / 2
   trainPer1 = (2*E_dW/n)^0.5;
   
   count_For_valid1 = 0;
   mu_valid1 = zeros(46,cluster);
   Sigma_valid1 = zeros(46,46,cluster);
   designMatrix_valid1 = zeros(temp_n,cluster);
   
   cell_whole_valid1 = raw(n+1:n+temp_n, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
   x_whole_valid1 = cell2mat(cell_whole_valid1);
   sigma_valid = diag(diag(cov(x_whole_valid1)))+eye(46)/100;
   sigma_inverse_valid1 = inv(sigma_valid);
   
   diagonal_sigma_valid1 = diag(diag(sigma_valid));
   
   while(count_For_valid1 < cluster)
      if(count_For_valid1==0)
          lower_valid1 = 1;
          upper_valid1 = floor(temp_n/cluster);
      elseif(count_For_valid1 == cluster-1)
          lower_valid1 = floor((temp_n/cluster))*count_For_valid1+1;
          upper_valid1 = temp_n;
      else
          lower_valid1 = floor((temp_n/cluster))*count_For_valid1+1;
          upper_valid1 = floor((temp_n/cluster))*(count_For_valid1+1);
      end
      
      cell_For_Mew_valid1 = raw(lower_valid1:upper_valid1, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
      x_For_Mew_valid1 = cell2mat(cell_For_Mew_valid1);
      mew_valid1 = mean(x_For_Mew_valid1);
      mu_valid1(:,count_For_valid1+1) = transpose(mew_valid1);
      Sigma_valid1(:,:,count_For_valid1+1) = diagonal_sigma_valid1;
      
      count_For_valid1 = count_For_valid1 + 1;
   end
   
   for r = n+1:n+temp_n
       cell = raw(r, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
       x_cell = cell2mat(cell);
       for clust = 1:cluster
           subtraction = x_cell-transpose(mu1(:,clust));
           answer = exp(-0.5 * subtraction * sigma_inverse * transpose(subtraction));
           designMatrix_valid1(r,clust)=answer;
       end
   end
   
   designMatrix_valid1(:,1)=1;
   
   E_dW_valid1 = 0;
   for N=n+1:n+temp_n
       E_w = (cell2mat(raw(N,1)) - ( transpose(w1) * transpose(designMatrix_valid1(N,:))));
       E_dW_valid1 = E_dW_valid1 + E_w^2;
   end
   E_dW_valid1 = E_dW_valid1 / 2
   validPer1 = (2*E_dW_valid1/temp_n)^0.5;
   
end

% save('proj2.mat','M1','M2', 'mu1','mu2', 'Sigma1','Sigma2', 'lambda1','lambda2', 'trainInd1','trainInd2' ,'validInd1','validInd2','w1','w2','trainPer1','trainPer2','validPer1','validPer2','w01','w02','dw1','dw2','eta1','eta2')

%{
for cluster = 85:85
    M = cluster;
    w01 = 500*rand(M,1);
    w01_temp = w01;
    eta_scalar = 1;
%     lambda_st_real = 0.001;
    n = floor(69623*0.8);
    initial_difference_real = norm(w1-w01);
    TimeToTerminate_real = 0;
    count_terminate_real = 0;
    
    while (TimeToTerminate_real == 0)
        count_terminate_real = count_terminate_real + 1;
        for row=1:length(designMatrix)
            delta_e_d = -(cell2mat(raw(row,1))-transpose(w01_temp)*transpose(designMatrix(row,:)))*designMatrix(row,:);
            delta_e_w = w01_temp;
            delta_e = delta_e_d + transpose(lambda1 * delta_e_w);

            eta1(1,row) = eta_scalar;
            eta_scalar = eta_scalar - 0;

            delta_w = -eta_scalar * delta_e;
            dw1(:,row) = transpose(delta_w);
            w01_temp = w01_temp + transpose(delta_w);

            final_difference_real = norm(w1-w01_temp);
            final_diff_real_matrix(:,row) = final_difference_real;
            if(final_difference_real < 0.1*initial_difference_real)
% % %             if(final_difference_real < 1)
                TimeToTerminate_real = 1;
                break;
            end
        end
    end
end

for cluster_synthetic_1=89:89
   M2 = cluster_synthetic_1;
   n_synthetic = floor(2000*0.8);
   count_synthetic_1 = 0;
   mu2 = zeros(10, cluster_synthetic_1);
   Sigma2 = zeros(10, 10, cluster_synthetic_1);
   designMatrix_synthetic = zeros(n_synthetic, cluster_synthetic_1);
   
   x_whole_synthetic_1 = x(1:n_synthetic,:)
   sigma_synthetic_1 = diag(diag(cov(x_whole_synthetic_1)))+eye(10)/100;
   sigma_inverse_synthetic_1 = inv(sigma_synthetic_1);
   
   diagonal_sigma_synthetic_1 = diag(diag(sigma_synthetic_1));
   lambda2 = 0.5;
   
   trainInd2 = [];
   for indices = 1:n_synthetic
      trainInd2 = [trainInd2; indices];
   end
   
   temp_synthetic_1 = floor(2000*0.2);
   validInd2 = [];
   for indices = n_synthetic+1:n_synthetic+temp_synthetic_1
      validInd2 = [validInd2; indices]; 
   end
   
   while(count_synthetic_1 < cluster_synthetic_1)
      if(count_synthetic_1==0)
          lower_synthetic_1 = 1;
          upper_synthetic_1 = floor(n_synthetic/cluster_synthetic_1);
      elseif(count_synthetic_1 == cluster_synthetic_1-1)
          lower_synthetic_1 = floor((n_synthetic/cluster_synthetic_1))*count_synthetic_1+1;
          upper_synthetic_1 = n_synthetic;
      else
          lower_synthetic_1 = floor((n_synthetic/cluster_synthetic_1))*count_synthetic_1+1;
          upper_synthetic_1 = floor((n_synthetic/cluster_synthetic_1))*(count_synthetic_1+1);
      end
      
      x_For_Mew_synthetic_1 = x(lower_synthetic_1:upper_synthetic_1,:);
      mew_synthetic_1 = mean(x_For_Mew_synthetic_1);
      mu2(:,count_synthetic_1+1) = transpose(mew_synthetic_1);
      Sigma2(:,:,count_synthetic_1+1) = diagonal_sigma_synthetic_1;
      
      count_synthetic_1 = count_synthetic_1 + 1;
   end
   
   for r=1:n_synthetic
      x_row_synthetic_1 = x(r,:);
      for clust_synthetic_1 = 1:cluster_synthetic_1
         subtraction_synthetic_1 = x_row_synthetic_1-transpose(mu2(:,clust_synthetic_1));
         answer_synthetic_1 = exp(-0.5 * subtraction_synthetic_1 * sigma_inverse_synthetic_1 * transpose(subtraction_synthetic_1));
         designMatrix_synthetic(r,clust_synthetic_1)=answer_synthetic_1;
      end
   end
   
   designMatrix_synthetic(:,1)=1;
   
   w2 = inv(lambda2*eye(cluster_synthetic_1) + transpose(designMatrix_synthetic) * designMatrix_synthetic) * transpose(designMatrix_synthetic) * t(1:n_synthetic,1);
   E_dw_synthetic_1 = 0;
   
   for N=1:n_synthetic
       E_w_synthetic_1 = (t(N,1) - ( transpose(w2) * transpose(designMatrix_synthetic(N,:))));
       E_dw_synthetic_1 = E_dw_synthetic_1 + E_w_synthetic_1^2;
   end
   E_dw_synthetic_1 = E_dw_synthetic_1 / 2
   trainPer2 = (2*E_dw_synthetic_1/n_synthetic)^0.5;
   
   count_For_valid2 = 0;
   mu_valid2 = zeros(10,cluster_synthetic_1);
   Sigma_valid2 = zeros(10,10,cluster_synthetic_1);
   designMatrix_valid2 = zeros(temp_synthetic_1,cluster_synthetic_1);
   
   x_whole_valid2 = x(n_synthetic+1:n_synthetic+temp_synthetic_1,:);
   sigma_valid2 = diag(diag(cov(x_whole_valid2)))+eye(10)/100;
   sigma_inverse_valid2 = inv(sigma_valid2);
   
   diagonal_sigma_valid2 = diag(diag(sigma_valid2));
   
   while(count_For_valid2 < cluster_synthetic_1)
      if(count_For_valid2==0)
          lower_valid2 = 1;
          upper_valid2 = floor(temp_synthetic_1/cluster_synthetic_1);
      elseif(count_For_valid2 == cluster_synthetic_1-1)
          lower_valid2 = floor((temp_synthetic_1/cluster_synthetic_1))*count_For_valid2+1;
          upper_valid2 = temp_synthetic_1;
      else
          lower_valid2 = floor((temp_synthetic_1/cluster_synthetic_1))*count_For_valid2+1;
          upper_valid2 = floor((temp_synthetic_1/cluster_synthetic_1))*(count_For_valid2+1);
      end
      
%       cell_For_Mew_valid1 = raw(lower_valid1:upper_valid1, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);
      x_For_Mew_valid2 = x(n_synthetic+lower_valid2:n_synthetic+upper_valid2,:);
      mew_valid2 = mean(x_For_Mew_valid2);
      mu_valid2(:,count_For_valid2+1) = transpose(mew_valid2);
      Sigma_valid2(:,:,count_For_valid2+1) = diagonal_sigma_valid2;
      
      count_For_valid2 = count_For_valid2 + 1;
   end
   
   for r = n_synthetic+1 : n_synthetic+temp_synthetic_1
       x_row_synthetic_1_valid2 = x(r,:);
       for clust = 1:cluster_synthetic_1
           subtraction = x_row_synthetic_1_valid2-transpose(mu2(:,clust));
           answer = exp(-0.5 * subtraction * sigma_inverse_synthetic_1 * transpose(subtraction));
           designMatrix_valid2(r,clust)=answer;
       end
   end
   
   designMatrix_valid2(:,1)=1;
   
   E_dW_valid2 = 0;
   for N=n_synthetic+1:n_synthetic+temp_synthetic_1
       E_w = (t(N,1) - ( transpose(w2) * transpose(designMatrix_valid2(N,:))));
       E_dW_valid2 = E_dW_valid2 + E_w^2;
   end
   E_dW_valid2 = E_dW_valid2 / 2
   validPer2 = (2*E_dW_valid2/temp_synthetic_1)^0.5;
%    validPer2 = (2*E_dW_valid2/700)^0.5;
   
end


for cluster = 89:89
    M = cluster;
    w02 = 1.8*ones(M,1);
    w02_temp = w02;
    eta_scalar_synthetic = 1;
%     lambda_st_synthetic = 0;
    n = floor(2000*0.8);
    initial_difference = norm(w2-w02);
    TimeToTerminate = 0;
    count_terminate = 0;
    
    while (TimeToTerminate == 0)
        count_terminate = count_terminate + 1;
        for row=1:length(designMatrix_synthetic)
    %         delta_e_d = -(cell2mat(raw(row,1))-transpose(w01_temp)*transpose(designMatrix(row,:)))*designMatrix(row,:);
            delta_e_d_synthetic = -(t(row,1)-transpose(w02_temp)*transpose(designMatrix_synthetic(row,:)))*designMatrix_synthetic(row,:);
            delta_e_w_synthetic = w02_temp;
            delta_e_synthetic = delta_e_d_synthetic + transpose(lambda2 * delta_e_w_synthetic);

            eta2(1,row) = eta_scalar_synthetic;
            eta_scalar_synthetic = eta_scalar_synthetic - 0;

            delta_w_synthetic = -eta_scalar_synthetic * delta_e_synthetic;
            dw2(:,row) = transpose(delta_w_synthetic);
            w02_temp = w02_temp + transpose(delta_w_synthetic);

            final_difference = norm(w2-w02_temp);
            final_diff_matrix(:,row) = final_difference;
            if(final_difference < 0.1*initial_difference)
% %             if(final_difference < 1)
                TimeToTerminate = 1;
                break;
            end
%             Erms = ((2*delta_e_synthetic)/floor(2000*0.2))^0.5;
        end
    end
end
%}
%% Replace non-numeric cells with NaN
% R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
% rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Clear temporary variables
% clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;